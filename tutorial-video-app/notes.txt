🔖 https://youtu.be/6l8RWV8D-Yo?t=19900
📝 DO THE ASSIGNMENTS ALONG WITH THE CHAPTERS MOFO!

REFER TO THE REACT DOCS, THEY ARE AMAZING

React is used for single-page applications. Pages don't reload after every action. You can use React in multi-page applications as well.
React is a UI library based on components.

With traditional HTML & JS, it's very difficult to manage apps if we have a lot of complicated contents.
Each web page can be broken into components (parts). YouTube has video lists, each video list has a video, each
video has a thumbnail, title.

A DOM tree can be very vast, but a component tree has 
1> Easy structure
2> Reusability

-> Inline styles must be passed as an object
props ✅z

-> props are read-only. Don't reassign them through onClick etc
-> If you want to pass another oject as props to a component, you can use the spread operator to do that.
-> When you nest a component inside another component, access the inner component using props.children

How to conditionally render stuff and how to render lists in React?
Conditionally adding check mark if a channel is verified 
1. Use if-else block - but there are simpler methods
2. Use ternary operator
3. (BEST) use logical AND short-circuiting

Rendering videos using a list, by creating a videos array. Adding an id attribute to videos to generate different thumbnails.

* Each list child should have a unique key prop. So that React vDOM can uniquely target a child and only re-render it if it has been changed. 
Your database generates an ID automatically, if front-end only project, use uuid() to generate.

Creating a thumbnail component. Adding different functionality to the buttons. One will log, the other will alert

Across React components, we have event bubbling. If we click on a playbutton, the onClick of App is also getting triggered.
So, in the onClick function of button, do event.stopPropagation()

useState

If you change a variable normally and want to see the changes, you must re-render the components. How?
Make that variable a state variable. useState is a hook -> an external function which we are using. State is a temporary
memory in React. The state is getting stored globally somewhere, and the hook is referring to that.

* YOU NEVER CHANGE A STATE VARIABLE DIRECTLY, ALWAYS MAKE A COPY, MODIFY THAT COPY AND SET THAT UPDATED COPY AS NEW STATE

                                ADDING FORMS
How to get values from form inputs? evt.target.value
You have a state variable, how to pass it to parent(state lifting)?

Pass the setVideos function as a prop to your AddVideo component, do stuff in AV, call the setVideos function in 
AV, it will update the state (STATE LIFTING). You also have to pass the videos array as well, which is getting inefficient.

So, in your parent component, create a function and assume it expects a new video, then update the State in that function. 
Pass this new function as a prop to child, and in the child, call this function and pass the new video.

How to clear the inputs after submitting? 1. Set the input value = ""
2. Use controlled forms (components) -> When a component's variables depend on a State variable.
But if your state variable doesn't exist, the value is set to undefined. Meaning, you are first saying it's 
uncontrolled then you are forcing it to be controlled. So give a default value. (Warning dega warna)

You can hard-code input values to "" using DOM methods as well, but that could lead to inconsistencies in the future.

This is a bit complicated, so to solve ths problem we have Context API and Redux.
To pass state to sibling: pass data to parent, and from parent to other child

* Moving the list of videos to their separate components

Adding Delete functionality by passing the id from Video component and using filter() function.

Edit functionality -> When we click on edit button, we can send the id to the App component and find the video from there. 
But, how do we tell the AddVideo component to pre-fill the data with the selected video? 

How do we write logic that the editingVideo's title and views are pre-filled in the inputs? Should we always set video = editingVideo?
But that will ruin your original logic.

Also, how do we set it up to get triggered only when we click on edit video? Us component mein kuch apne aap hona chahiye (apne aap detect)

Introducing, useEffect() ✨
Things happening as a consequence. We want something to happen as a result of count changing.

It accepts 2 things -> callback function and dependency array. Dependency array tells useEffect what to listen to.
There is an optional return function as well.

No matter what you provide in dependency array, it will run at least once when the component mounts.

Clean-up function => Before the new count is logged, we get the clean-up message. useEffect first runs the code on first mount. 
Whenever something in the dependency array changes, the useEffect destroys itself and it will run the clean-up function before 
doing so. Then it will recreate itself with the new value. If this is confusing and you are wondering why the cleanup function 
ran before callback, think like this ->

we interact -> state changes -> component re-renders, causing useEffect to clean itself up (running that function) -> DOM is updated on re-render -> callback executes because it's a side-effect of the CHANGE IN STATE + RE-RENDER, NOT THE CLICKING OF BUTTON!!


                                    useReducer
Redux is a famous state-management libary. Right now, managing all these states is difficult. Props, state lifting etc.
What if there was some way to maintain this globally. Redux isn't present inside React by default, but useReducer helps us do that.

Redux is a very big thing.

1. props are increasing
2. edit, delete and add videos are just updating the state. Can we club them together?
useReducer does this.

Reducer is a function which returns the next state!

You don't have to use useReducer everywhere, only use where there are a lot of functions, like in this videos app.
If it is simple, use State. use Reducer sparingly.

* We have clubbed together the functions related to a state. As our project grows, we will create a folder called
reducers. If you want, instead of passing editingVideo, addVideo as separate props, just pass the dispatch function 
and call dispatch in the child components.

How is dispatch() calling the reducer function? hmm

 🔴🔴🔴 Understand Redux from https://www.youtube.com/playlist?list=PL2PkZdv6p7ZlhDX22YEd2Il9jdgCv13vM

                        CONTEXT API (to do...)
Continued...

                    CONTEXT WITH REDUCER
Refactoring the entire code with Context api

                    Custom hooks
Hooks can only be called inside a functional component.
*** You should give use prefix to a function (and thus make it a Hook) if it uses at least one Hook inside of it:

---------------- The following are ESCAPE hatches, keep their use to a minimum. Try to achieve optimisation without using them too much.

                        USEREF HOOK
Every time a state variable changes and a component re-renders, variables declared with let and const are also
reinitialized!!
What if we want to make a variable which doesn't cause re-renders, but maintains it values across re-renders?
useRef âœ¨

useRef returns an object. So to use value of numOfClicks, we need to use numOfClicks.current.
useRef helps us select DOM elements, something which we can't do using normal React. To link a ref to a DOM element, 
pass the variable in the ref attribute of the HTML element.

                    USEEFFECT ADVANCED (WITH API)
React wants our components to be pure(same output with same input). That's why we get 2 console.logs, because strictMode
calls the components again.
We want some side-effects. For eg, when the page loads, a video should autoplay etc.
mounting - first render, unmounting, render - when component loads again with new data.

We could also write our functionality outside a useEffect and by itself in the component, but if it runs
before the DOM elements have loaded, it will give an error (referencing null). useEffect always runs AFTER elements have been loaded.

useEffect dependency array mein bas unhi cheezon ko rakho, which will actually change.

1. callback
2. dependency array
3. clean-up function - isme do the opposite of what you did above

// useEffect(() => {
  //   const idx = setInterval(() => {
  //     console.log("Video playing", id);
  //   }, 3000);

  //   return () => {
  //     clearInterval(idx);
  //   };

  //   //this function runs when the component unmounts. When we delete the video, it is removed from the DOM
  // }, [id]);



                          MEMOIZATION AND CALLBACK
Read the docs if it isn't clear.

Memoising is caching. If there is a very expensive calculation, we store the result and use the result later on.

When we are re-rendering the component on every change, it's running the recursive function on each render, which is slowing down everything.

But if a dependency changes, the app will slow down again, as it will calculate and store again.

* If we place function inside component, then useMemo will say place it inside dep. array, but if we do that, every time function re-renders,
fib() will be redeclared each time, making the useMemo run again and again.

To memoize a function, use useCallback
useCallback - memoize functions/callbacks
useMemo - memoize calculations
Otherwise, they are the same.

Now, we will memoize all the components so that all of them don't render anytime a small thing is changed or the props aren't changed

To memoize a function, just wrap it in memo()

*** Abhi jitna memoize kiya hai, UTNE KI ZARURAT NHI HAI. React's internal working is built to seamlessly re-render.
If you are building a huge app which is getting very slow, first step is to fix your logic.

*** console.time("iterating through array")
    loopThroughArray();
    console.timeEnd("iterating through array")
    If this value is very large, you might want to memoize